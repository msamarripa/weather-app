import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import { RootState } from "./store";
import {
  Coord,
  CurrentWeather,
  getCurrentWeather,
} from "../api/weather";

export interface WeatherState {
  currentWeather: CurrentWeather;
  status: "idle" | "loading" | "failed";
}

const initialState: WeatherState = {
  currentWeather: {} as CurrentWeather,
  status: "idle",
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const getCurrentWeatherAsync = createAsyncThunk(
  "weather/getCurrentWeather",
  async (coords: Coord) => {
    const response = await getCurrentWeather(coords);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const weatherSlice = createSlice({
  name: "weather",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    // setCoords: (state, action: PayloadAction<Coord>) => {
    //   state.coords = action.payload;
    // },
    // Use the PayloadAction type to declare the contents of `action.payload`
    // incrementByAmount: (state, action: PayloadAction<number>) => {
    //   state.value += action.payload;
    // },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getCurrentWeatherAsync.pending, (state) => {
        state.status = "loading";
      })
      .addCase(getCurrentWeatherAsync.fulfilled, (state, action) => {
        state.status = "idle";
        state.currentWeather = action.payload;
      });
  },
});

// export const { setCoords } = weatherSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectCurrentWeather = (state: RootState) =>
  state.weather.currentWeather;
export const selectCurrentWeatherStatus = (state: RootState) => state.weather.status

export default weatherSlice.reducer;
